[
    {
        "query": "individual_batting_statistics",
        "sql_code": "WITH filtered_balls AS (\n  SELECT *\n  FROM table_name\n  WHERE insert_condition_here\n),\n\nindividual_innings AS (\n  SELECT \n    fixtureId,\n    batsman,\n    battingTeam,\n    SUM(runs_scored) AS runs,\n    COUNT(*) AS balls,\n    SUM(is_wicket) AS outs,\n    SUM(CASE WHEN runs_scored = 4 THEN 1 ELSE 0 END) AS fours,\n    SUM(CASE WHEN runs_scored = 6 THEN 1 ELSE 0 END) AS sixes,\n    SUM(CASE WHEN runs_scored = 0 THEN 1 ELSE 0 END) AS dots\n  FROM filtered_balls\n  WHERE extras = 0  -- Assuming extras indicate wides/noballs not faced by batter\n  GROUP BY fixtureId, batsman, battingTeam\n),\n\nindividual_batting_stats AS (\n  SELECT \n    batsman AS player_name,\n    battingTeam AS team,\n    COUNT(DISTINCT fixtureId) AS innings,\n    SUM(runs) AS total_runs,\n    SUM(balls) AS total_balls,\n    SUM(outs) AS total_outs,\n    COALESCE(SUM(runs) * 100.0 / NULLIF(SUM(balls), 0), 0) AS strike_rate,\n    COALESCE(SUM(runs) * 1.0 / NULLIF(SUM(outs), 0), 0) AS batting_average,\n    MAX(runs) AS highest_score,\n    SUM(CASE WHEN runs >= 50 AND runs < 100 THEN 1 ELSE 0 END) AS fifties,\n    SUM(CASE WHEN runs >= 100 THEN 1 ELSE 0 END) AS hundreds,\n    SUM(fours) AS total_fours,\n    SUM(sixes) AS total_sixes,\n    COALESCE(SUM(dots) * 100.0 / NULLIF(SUM(balls), 0), 0) AS dot_percentage\n  FROM individual_innings\n  GROUP BY batsman, battingTeam\n)\n\nSELECT \n  player_name,\n  team,\n  innings,\n  total_runs,\n  total_balls,\n  total_outs,\n  ROUND(batting_average, 2) AS average,\n  ROUND(strike_rate, 2) AS strike_rate,\n  ROUND(dot_percentage, 2) AS dot_percentage,\n  highest_score,\n  fifties,\n  hundreds,\n  total_fours,\n  total_sixes\nFROM individual_batting_stats\nORDER BY total_runs DESC;",
        "sql_description": "Individual batting stats using batsman field. Uses runs_scored for batter-specific runs and extras=0 for valid balls faced."
    },
    {
        "query": "team_batting_statistics",
        "sql_code": "WITH filtered_balls AS (\n  SELECT *\n  FROM table_name\n  WHERE insert_condition_here\n),\n\nteam_innings AS (\n  SELECT \n    fixtureId,\n    battingTeam,\n    SUM(runs) AS total_runs,\n    COUNT(*) AS balls_bowled,\n    SUM(is_wicket) AS wickets_lost,\n    SUM(CASE WHEN runs = 4 THEN 1 ELSE 0 END) AS fours,\n    SUM(CASE WHEN runs = 6 THEN 1 ELSE 0 END) AS sixes,\n    SUM(CASE WHEN runs = 0 THEN 1 ELSE 0 END) AS dots\n  FROM filtered_balls\n  GROUP BY fixtureId, battingTeam\n),\n\nteam_batting_stats AS (\n  SELECT \n    battingTeam,\n    COUNT(DISTINCT fixtureId) AS matches,\n    SUM(total_runs) AS total_runs,\n    SUM(balls_bowled) AS total_balls,\n    SUM(wickets_lost) AS total_outs,\n    COALESCE(SUM(total_runs) * 100.0 / NULLIF(SUM(balls_bowled), 0), 0) AS strike_rate,\n    COALESCE(SUM(total_runs) * 1.0 / NULLIF(SUM(wickets_lost), 0), 0) AS batting_average,\n    MAX(total_runs) AS highest_score,\n    SUM(fours) AS total_fours,\n    SUM(sixes) AS total_sixes,\n    COALESCE(SUM(dots) * 100.0 / NULLIF(SUM(balls_bowled), 0), 0) AS dot_percentage\n  FROM team_innings\n  GROUP BY battingTeam\n)\n\nSELECT \n  battingTeam AS team,\n  matches,\n  total_runs,\n  total_balls,\n  total_outs,\n  ROUND(batting_average, 2) AS average,\n  ROUND(strike_rate, 2) AS strike_rate,\n  ROUND(dot_percentage, 2) AS dot_percentage,\n  highest_score,\n  total_fours,\n  total_sixes\nFROM team_batting_stats\nORDER BY total_runs DESC;",
        "sql_description": "Team batting stats using battingTeam field. Considers all runs (including extras) for team totals."
    },
    {
        "query": "individual_bowling_statistics",
        "sql_code": "WITH filtered_balls AS (\n  SELECT *\n  FROM table_name\n  WHERE insert_condition_here\n),\n\nindividual_bowling AS (\n  SELECT \n    fixtureId,\n    bowler,\n    bowlingTeam,\n    SUM(is_wicket) AS wickets,\n    SUM(runs_conceded) AS runs_conceded,\n    COUNT(*) AS balls_bowled,\n    SUM(CASE WHEN runs = 0 THEN 1 ELSE 0 END) AS dot_balls,\n    SUM(CASE WHEN runs IN (4, 6) THEN 1 ELSE 0 END) AS boundary_balls\n  FROM filtered_balls\n  GROUP BY fixtureId, bowler, bowlingTeam\n),\n\nindividual_bowling_stats AS (\n  SELECT \n    bowler AS bowler_name,\n    bowlingTeam AS team,\n    COUNT(DISTINCT fixtureId) AS innings,\n    SUM(wickets) AS total_wickets,\n    SUM(runs_conceded) AS total_runs_conceded,\n    SUM(balls_bowled) AS total_balls,\n    COALESCE(SUM(runs_conceded) * 1.0 / NULLIF(SUM(wickets), 0), 0) AS bowling_average,\n    COALESCE(SUM(runs_conceded) * 6.0 / NULLIF(SUM(balls_bowled), 0), 0) AS economy_rate,\n    COALESCE(SUM(dot_balls) * 100.0 / NULLIF(SUM(balls_bowled), 0), 0) AS dot_percentage,\n    COALESCE(SUM(boundary_balls) * 100.0 / NULLIF(SUM(balls_bowled), 0), 0) AS boundary_percentage\n  FROM individual_bowling\n  GROUP BY bowler, bowlingTeam\n)\n\nSELECT \n  bowler_name,\n  team,\n  innings,\n  total_wickets,\n  total_runs_conceded,\n  total_balls,\n  ROUND(bowling_average, 2) AS average,\n  ROUND(economy_rate, 2) AS economy,\n  ROUND(dot_percentage, 2) AS dot_percentage,\n  ROUND(boundary_percentage, 2) AS boundary_percentage\nFROM individual_bowling_stats\nORDER BY total_wickets DESC;",
        "sql_description": "Bowling stats using bowler field. Includes all bowling deliveries with runs_conceded for bowler analysis."
    },
    {
        "query": "team_bowling_statistics",
        "sql_code": "WITH filtered_balls AS (\n  SELECT *\n  FROM table_name\n  WHERE insert_condition_here\n),\n\nteam_bowling AS (\n  SELECT \n    fixtureId,\n    bowlingTeam,\n    SUM(is_wicket) AS wickets,\n    SUM(runs_conceded) AS runs_conceded,\n    COUNT(*) AS balls_bowled,\n    SUM(CASE WHEN runs = 0 THEN 1 ELSE 0 END) AS dot_balls,\n    SUM(CASE WHEN runs IN (4, 6) THEN 1 ELSE 0 END) AS boundary_balls\n  FROM filtered_balls\n  GROUP BY fixtureId, bowlingTeam\n),\n\nteam_bowling_stats AS (\n  SELECT \n    bowlingTeam AS team,\n    COUNT(DISTINCT fixtureId) AS matches,\n    SUM(wickets) AS total_wickets,\n    SUM(runs_conceded) AS total_runs_conceded,\n    SUM(balls_bowled) AS total_balls,\n    COALESCE(SUM(runs_conceded) * 1.0 / NULLIF(SUM(wickets), 0), 0) AS bowling_average,\n    COALESCE(SUM(runs_conceded) * 6.0 / NULLIF(SUM(balls_bowled), 0), 0) AS economy_rate,\n    COALESCE(SUM(dot_balls) * 100.0 / NULLIF(SUM(balls_bowled), 0), 0) AS dot_percentage,\n    COALESCE(SUM(boundary_balls) * 100.0 / NULLIF(SUM(balls_bowled), 0), 0) AS boundary_percentage\n  FROM team_bowling\n  GROUP BY bowlingTeam\n)\n\nSELECT \n  team,\n  matches,\n  total_wickets,\n  total_runs_conceded,\n  total_balls,\n  ROUND(bowling_average, 2) AS average,\n  ROUND(economy_rate, 2) AS economy,\n  ROUND(dot_percentage, 2) AS dot_percentage,\n  ROUND(boundary_percentage, 2) AS boundary_percentage\nFROM team_bowling_stats\nORDER BY total_wickets DESC;",
        "sql_description": "Team bowling analysis using bowlingTeam. Aggregates all bowling performance metrics at team level."
    }
]