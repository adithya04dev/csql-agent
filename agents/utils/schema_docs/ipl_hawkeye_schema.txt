table name:ipl_hawkeye

schema:

batting_team: STRING (Name of the team currently batting)
batsman_id: FLOAT (Unique identifier for the batsman)
batsman_name: STRING (Name of the batsman on strike)
batsman_is_rhb: BOOLEAN (True if the batsman is right-handed, False otherwise)
non_striker_id: FLOAT (Unique identifier for the non-striker batsman)
non_striker_name: STRING (Name of the non-striker batsman)
non_striker_is_rhb: BOOLEAN (True if the non-striker is right-handed, False otherwise)
bowling_team: STRING (Name of the team currently bowling)
bowler_id: FLOAT (Unique identifier for the bowler)
bowler_name: STRING (Name of the bowler)
bowler_is_rhb: BOOLEAN (True if the bowler is right-handed, False otherwise)
delivery_type: STRING (Type of delivery, e.g., 'Seam', NO_BALL')
innings: INTEGER (Innings number, usually 1 or 2)
ball: INTEGER (Ball number within the over, 1-6)
over: INTEGER (Over number in the innings)
shot_is_attacked: BOOLEAN (True if the shot was deemed an attacking shot)
shot_is_played: BOOLEAN (True if a shot was attempted/played by the batsman)
bounce_angle: FLOAT (Angle at which the ball bounced off the pitch)
bounce_pos_x: FLOAT (X-coordinate of the ball's bounce position)
bounce_pos_y: FLOAT (Y-coordinate of the ball's bounce position)
boucne_pos_z: FLOAT (Z-coordinate (height) of the ball's bounce position) # Note: Typo in original 'boucne'
crease_pos_x: FLOAT (X-coordinate of the ball's position at the batting crease)
crease_pos_y: FLOAT (Y-coordinate of the ball's position at the batting crease)
crease_pos_z: FLOAT (Z-coordinate (height) of the ball's position at the batting crease)
deviation: FLOAT (Amount the ball deviated (moved sideways) after bouncing. Can be positive or negative values - use ABS() function to get  deviation magnitude)
drop_angle: FLOAT (Angle at which the ball descended towards the pitch)
hit_stumps: BOOLEAN (True if the ball trajectory predicted it would hit the stumps)
impact_pos_x: FLOAT (X-coordinate of the ball's impact point (e.g., with bat or pad))
impact_pos_y: FLOAT (Y-coordinate of the ball's impact point)
impact_pos_z: FLOAT (Z-coordinate (height) of the ball's impact point)
initial_angle: FLOAT (Initial angle of the ball's trajectory after release)
landing_pos_x: FLOAT (Predicted X-coordinate where the ball would land if unintercepted)
landing_pos_y: FLOAT (Predicted Y-coordinate where the ball would land if unintercepted)
landing_pos_z: FLOAT (Predicted Z-coordinate (height) where the ball would land if unintercepted)
pbr: FLOAT (Pitch Bounce Ratio or similar metric related to bounce)
react_time_to_crease: FLOAT (Time taken for the ball to travel from release to the crease)
react_time_to_intercept: FLOAT (Time taken for the ball to travel from release to the point of interception/impact)
real_distance: FLOAT (Actual distance the ball travelled)
release_pos_x: FLOAT (X-coordinate of the ball's position at release)
release_pos_y: FLOAT (Y-coordinate of the ball's position at release)
release_pos_z: FLOAT (Z-coordinate (height) of the ball's position at release)
release_speed: FLOAT (Ball velocity at release point measured in mph; multiply by 1.60934 to convert to km/h - always present speed statistics in km/h when analyzing data)
spin_rate: FLOAT (Spin rate imparted on the ball by the bowler)
stump_pos_x: FLOAT (X-coordinate of the stumps)
stump_pos_y: FLOAT (Y-coordinate of the stumps)
stump_pos_z: FLOAT (Z-coordinate (height) of the stumps)
swing: FLOAT (Amount of lateral movement (swing) of the ball before bouncing)
match_id: FLOAT (Unique identifier for the match)
ball_id: FLOAT (Unique identifier for this specific ball/delivery)
is_single: BOOLEAN (True if one run was scored off the bat)
is_double: BOOLEAN (True if two runs were scored off the bat)
is_three: BOOLEAN (True if three runs were scored off the bat)
is_dot: BOOLEAN (True if no runs were scored off the bat or as extras)
is_wide: BOOLEAN (True if the delivery was a wide)
is_no_ball: BOOLEAN (True if the delivery was a no-ball)
is_bye: BOOLEAN (True if runs were scored as byes)
is_leg_bye: BOOLEAN (True if runs were scored as leg byes)
is_four: BOOLEAN (True if four runs were scored (off bat or extras))
is_six: BOOLEAN (True if six runs were scored off the bat)
is_wicket: BOOLEAN (True if a wicket fell on this delivery)
wicket_type: STRING (Type of dismissal, e.g., 'caught', 'bowled', 'lbw')
is_bowler_wicket: BOOLEAN (True if the wicket is credited to the bowler)
ball_type: STRING (Categorization of the ball type, e.g., 'PACE', 'SPIN')
shot_type: STRING (Type of shot played by the batsman, e.g., 'DRIVE', 'PULL')
pitch_x: FLOAT (X-coordinate where the ball pitched)
pitch_y: FLOAT (Y-coordinate where the ball pitched)
ball_line: STRING (Bowling line description, e.g., 'OUTSIDE_OFF', 'MIDDLE_STUMP')
ball_length: STRING (Bowling length description, e.g., 'FULL', 'SHORT', 'GOOD')
runs: FLOAT (Total runs scored on this delivery, including extras)
actual_runs: FLOAT (Runs scored off the bat)
extras: FLOAT (Runs scored as extras (wides, no-balls, byes, leg-byes))
ball_runs: STRING (Descriptive string of runs scored, e.g., '1', '4', 'W')
is_bouncer: BOOLEAN (True if the delivery was classified as a bouncer)
is_free_hit: BOOLEAN (True if this delivery was a free hit)
innings_no: INTEGER (Alias or duplicate of the 'innings' column)
ground: STRING (Name of the stadium/ground where the match was played)
date: DATE (Date of the match)


docs and some sample queries
[
    {
        "query": "individual_batting_statistics_by_name",
        "sql_code": "WITH filtered_balls AS (\n  SELECT *\n  FROM hdata_new_schema -- Replace with your actual table name\n  WHERE insert_condition_here\n),\n\nindividual_innings AS (\n  SELECT \n    match_id, -- Keep match_id internally for HS, 50s, 100s calculation\n    batsman_name,\n    SUM(actual_runs) AS runs, \n    SUM(CASE WHEN is_wide = FALSE THEN 1 ELSE 0 END) AS balls_faced, \n    SUM(CASE WHEN is_wicket = TRUE THEN 1 ELSE 0 END) AS outs, \n    SUM(CASE WHEN actual_runs = 4 THEN 1 ELSE 0 END) AS fours, \n    SUM(CASE WHEN actual_runs = 6 THEN 1 ELSE 0 END) AS sixes, \n    SUM(CASE WHEN actual_runs = 0 AND is_wide = FALSE THEN 1 ELSE 0 END) AS dots \n  FROM filtered_balls\n  WHERE batsman_name IS NOT NULL -- Ensure name exists for grouping\n  GROUP BY match_id, batsman_name -- Group by match and name for per-innings stats\n),\n\nindividual_batting_stats AS (\n  SELECT \n    batsman_name AS player_name,\n    COUNT(DISTINCT match_id) AS innings_played, -- Count distinct matches the player batted in\n    SUM(runs) AS total_runs,\n    SUM(balls_faced) AS total_balls_faced,\n    SUM(outs) AS total_outs,\n    CASE \n      WHEN SUM(balls_faced) = 0 THEN NULL \n      ELSE (SUM(runs) * 100.0 / SUM(balls_faced)) \n    END AS strike_rate,\n    CASE \n      WHEN SUM(outs) = 0 THEN NULL \n      ELSE SUM(runs) * 1.0 / SUM(outs) \n    END AS batting_average,\n    MAX(runs) AS highest_score,\n    SUM(CASE WHEN runs >= 50 AND runs < 100 THEN 1 ELSE 0 END) AS fifties,\n    SUM(CASE WHEN runs >= 100 THEN 1 ELSE 0 END) AS hundreds,\n    SUM(fours) AS total_fours,\n    SUM(sixes) AS total_sixes,\n    CASE \n      WHEN SUM(balls_faced) = 0 THEN NULL \n      ELSE (SUM(dots) * 100.0 / SUM(balls_faced)) \n    END AS dot_percentage\n  FROM individual_innings\n  GROUP BY batsman_name -- Final aggregation by player name only\n)\n\nSELECT \n  player_name,\n  innings_played,\n  total_runs,\n  total_balls_faced,\n  total_outs,\n  ROUND(CAST(batting_average AS NUMERIC), 2) AS average,\n  ROUND(CAST(strike_rate AS NUMERIC), 2) AS strike_rate,\n  ROUND(CAST(dot_percentage AS NUMERIC), 2) AS dot_percentage,\n  highest_score AS hs,\n  fifties,\n  hundreds,\n  total_fours,\n  total_sixes\nFROM individual_batting_stats\nORDER BY total_runs DESC;",
        "sql_description": "Aggregates individual batting stats grouped by 'batsman_name'. Uses 'actual_runs'. Counts non-wides as balls faced. Calculates standard metrics like average, strike rate, HS, 50s, 100s. Does not use player IDs."
    },
    {
        "query": "team_batting_statistics_by_name",
        "sql_code": "WITH filtered_balls AS (\n  SELECT *\n  FROM hdata_new_schema -- Replace with your actual table name\n  WHERE insert_condition_here\n),\n\nteam_innings AS (\n  SELECT \n    match_id, -- Keep match_id internally for highest score calculation\n    batting_team,\n    SUM(runs) AS total_runs_scored, \n    SUM(CASE WHEN is_wide = FALSE THEN 1 ELSE 0 END) AS balls_faced, \n    SUM(CASE WHEN is_wicket = TRUE THEN 1 ELSE 0 END) AS wickets_lost,\n    SUM(CASE WHEN is_four = TRUE THEN 1 ELSE 0 END) AS fours, \n    SUM(CASE WHEN is_six = TRUE THEN 1 ELSE 0 END) AS sixes, \n    SUM(CASE WHEN is_dot = TRUE THEN 1 ELSE 0 END) AS dots \n  FROM filtered_balls\n  WHERE batting_team IS NOT NULL\n  GROUP BY match_id, batting_team\n),\n\nteam_batting_stats AS (\n  SELECT \n    batting_team,\n    COUNT(DISTINCT match_id) AS matches,\n    SUM(total_runs_scored) AS total_runs,\n    SUM(balls_faced) AS total_balls_faced,\n    SUM(wickets_lost) AS total_wickets_lost,\n    CASE \n      WHEN SUM(balls_faced) = 0 THEN NULL \n      ELSE (SUM(total_runs_scored) * 100.0 / SUM(balls_faced)) \n    END AS team_run_rate_per_100_balls, \n    CASE \n      WHEN SUM(wickets_lost) = 0 THEN NULL \n      ELSE SUM(total_runs_scored) * 1.0 / SUM(wickets_lost) \n    END AS team_runs_per_wicket, \n    MAX(total_runs_scored) AS highest_team_score_in_innings,\n    SUM(fours) AS total_fours,\n    SUM(sixes) AS total_sixes,\n    CASE \n      WHEN SUM(balls_faced) = 0 THEN NULL \n      ELSE (SUM(dots) * 100.0 / SUM(balls_faced)) \n    END AS dot_percentage\n  FROM team_innings\n  GROUP BY batting_team\n)\n\nSELECT \n  batting_team,\n  matches,\n  total_runs,\n  total_balls_faced,\n  total_wickets_lost,\n  ROUND(CAST(team_runs_per_wicket AS NUMERIC), 2) AS team_average,\n  ROUND(CAST(team_run_rate_per_100_balls AS NUMERIC), 2) AS team_strike_rate,\n  ROUND(CAST(dot_percentage AS NUMERIC), 2) AS dot_percentage,\n  highest_team_score_in_innings AS highest_score,\n  total_fours,\n  total_sixes\nFROM team_batting_stats\nORDER BY total_runs DESC;",
        "sql_description": "Aggregates team batting stats grouped by 'batting_team'. Uses 'runs' (including all extras). Calculates team average (runs/wicket) and strike rate (runs/100 balls). Does not use team IDs."
    },
    {
        "query": "individual_bowling_statistics_by_name",
        "sql_code": "WITH filtered_balls AS (\n  SELECT *\n  FROM hdata_new_schema -- Replace with your actual table name\n  WHERE insert_condition_here\n),\n\nindividual_bowling_spells AS (\n  SELECT \n    match_id, -- Keep match_id internally for grouping spells\n    bowler_name,\n    SUM(CASE WHEN is_bowler_wicket = TRUE THEN 1 ELSE 0 END) AS wickets, \n    SUM(actual_runs + CASE WHEN is_wide = TRUE OR is_no_ball = TRUE THEN extras ELSE 0 END) AS runs_conceded,\n    SUM(CASE WHEN is_wide = FALSE AND is_no_ball = FALSE THEN 1 ELSE 0 END) AS balls_bowled, \n    SUM(CASE WHEN actual_runs = 0 AND is_wide = FALSE AND is_no_ball = FALSE THEN 1 ELSE 0 END) AS dot_balls, \n    SUM(CASE WHEN actual_runs >= 4 THEN 1 ELSE 0 END) AS boundary_balls_off_bat \n  FROM filtered_balls\n  WHERE bowler_name IS NOT NULL\n  GROUP BY match_id, bowler_name\n),\n\nindividual_bowling_stats AS (\n  SELECT \n    bowler_name,\n    COUNT(DISTINCT match_id) AS innings_bowled, \n    SUM(wickets) AS total_wickets,\n    SUM(runs_conceded) AS total_runs_conceded,\n    SUM(balls_bowled) AS total_balls_bowled,\n    SUM(dot_balls) AS total_dot_balls,\n    SUM(boundary_balls_off_bat) AS total_boundary_balls_off_bat,\n    CASE \n      WHEN SUM(wickets) = 0 THEN NULL \n      ELSE SUM(runs_conceded) * 1.0 / SUM(wickets) \n    END AS bowling_average,\n    CASE \n      WHEN SUM(balls_bowled) = 0 THEN NULL \n      ELSE (SUM(runs_conceded) * 6.0 / SUM(balls_bowled)) \n    END AS economy_rate,\n    CASE \n      WHEN SUM(balls_bowled) = 0 THEN NULL \n      ELSE (SUM(dot_balls) * 100.0 / SUM(balls_bowled)) \n    END AS dot_ball_percentage,\n    CASE \n      WHEN SUM(balls_bowled) = 0 THEN NULL \n      ELSE (SUM(boundary_balls_off_bat) * 100.0 / SUM(balls_bowled)) \n    END AS boundary_off_bat_percentage\n  FROM individual_bowling_spells\n  GROUP BY bowler_name -- Final aggregation by bowler name only\n)\n\nSELECT \n  bowler_name,\n  innings_bowled,\n  total_wickets,\n  total_runs_conceded,\n  total_balls_bowled,\n  ROUND(CAST(bowling_average AS NUMERIC), 2) AS average,\n  ROUND(CAST(economy_rate AS NUMERIC), 2) AS economy_rate,\n  ROUND(CAST(dot_ball_percentage AS NUMERIC), 2) AS dot_ball_percentage,\n  ROUND(CAST(boundary_off_bat_percentage AS NUMERIC), 2) AS boundary_percentage \nFROM individual_bowling_stats\nORDER BY total_wickets DESC;",
        "sql_description": "Aggregates individual bowling stats grouped by 'bowler_name'. Uses 'is_bowler_wicket'. Calculates runs conceded as 'actual_runs' + extras from wides/no-balls. Counts legal deliveries. Calculates standard metrics. Does not use bowler IDs."
    },
    {
        "query": "team_bowling_statistics_by_name",
        "sql_code": "WITH filtered_balls AS (\n  SELECT *\n  FROM hdata_new_schema -- Replace with your actual table name\n  WHERE insert_condition_here\n),\n\nteam_bowling_innings AS (\n  SELECT \n    match_id, -- Keep match_id internally for grouping innings\n    bowling_team,\n    SUM(CASE WHEN is_wicket = TRUE THEN 1 ELSE 0 END) AS wickets_taken,\n    SUM(runs) AS runs_conceded, \n    SUM(CASE WHEN is_wide = FALSE AND is_no_ball = FALSE THEN 1 ELSE 0 END) AS balls_bowled, \n    SUM(CASE WHEN actual_runs = 0 AND is_wide = FALSE AND is_no_ball = FALSE THEN 1 ELSE 0 END) AS dot_balls, \n    SUM(CASE WHEN is_four = TRUE OR is_six = TRUE THEN 1 ELSE 0 END) AS boundaries_conceded \n  FROM filtered_balls\n  WHERE bowling_team IS NOT NULL\n  GROUP BY match_id, bowling_team\n),\n\nteam_bowling_stats AS (\n  SELECT \n    bowling_team,\n    COUNT(DISTINCT match_id) AS matches,\n    SUM(wickets_taken) AS total_wickets_taken,\n    SUM(runs_conceded) AS total_runs_conceded,\n    SUM(balls_bowled) AS total_balls_bowled,\n    SUM(dot_balls) AS total_dot_balls,\n    SUM(boundaries_conceded) AS total_boundaries_conceded,\n    CASE \n      WHEN SUM(wickets_taken) = 0 THEN NULL \n      ELSE SUM(runs_conceded) * 1.0 / SUM(wickets_taken) \n    END AS team_bowling_average,\n    CASE \n      WHEN SUM(balls_bowled) = 0 THEN NULL \n      ELSE (SUM(runs_conceded) * 6.0 / SUM(balls_bowled)) \n    END AS team_economy_rate,\n    CASE \n      WHEN SUM(balls_bowled) = 0 THEN NULL \n      ELSE (SUM(dot_balls) * 100.0 / SUM(balls_bowled)) \n    END AS team_dot_ball_percentage,\n    CASE \n      WHEN SUM(balls_bowled) = 0 THEN NULL \n      ELSE (SUM(boundaries_conceded) * 100.0 / SUM(balls_bowled)) \n    END AS team_boundary_percentage\n  FROM team_bowling_innings\n  GROUP BY bowling_team\n)\n\nSELECT \n  bowling_team,\n  matches,\n  total_wickets_taken,\n  total_runs_conceded,\n  total_balls_bowled,\n  ROUND(CAST(team_bowling_average AS NUMERIC), 2) AS team_average,\n  ROUND(CAST(team_economy_rate AS NUMERIC), 2) AS team_economy_rate,\n  ROUND(CAST(team_dot_ball_percentage AS NUMERIC), 2) AS team_dot_ball_percentage,\n  ROUND(CAST(team_boundary_percentage AS NUMERIC), 2) AS team_boundary_percentage\nFROM team_bowling_stats\nORDER BY total_wickets_taken DESC;",
        "sql_description": "Aggregates team bowling stats grouped by 'bowling_team'. Uses 'runs' (including all extras) for runs conceded. Counts legal deliveries bowled. Calculates team average, economy, dot%, boundary%. Does not use team IDs."
    }
]

Some points..
-if query asked like by,per..like by year,by length,type or something u can just do group by and no need for search results of those columns as its asked like that only